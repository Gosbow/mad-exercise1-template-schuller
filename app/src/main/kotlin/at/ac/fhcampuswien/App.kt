/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package at.ac.fhcampuswien

import java.util.Scanner
import kotlin.math.pow

class App {
    // Game logic for a number guessing game
    fun playNumberGame(digitsToGuess: Int = 4) {
        val input = Scanner(System.`in`)

        var numberToGuess = generateRandomNonRepeatingNumber(digitsToGuess)
        while(true){
            println("Please enter an Input: ")
            var guess = input.nextInt()
            val toString = checkUserInputAgainstGeneratedNumber(guess, numberToGuess).toString()
            println(toString)
            if(guess == numberToGuess)
            {
                println("HORRAY YOU WON! GET A LIFE!")
                break
            }
        }

    }

    /**
     * Generates a non-repeating number of a specified length between 1-9.
     *
     * Note: The function is designed to generate a number where each digit is unique and does not repeat.
     * It is important to ensure that the length parameter does not exceed the maximum possible length
     * for non-repeating digits (which is 9 excluding 0 for base-10 numbers).
     *
     * @param length The length of the non-repeating number to be generated.
     *               This dictates how many digits the generated number will have.
     * @return An integer of generated non-repeating number.
     *         The generated number will have a number of digits equal to the specified length and will
     *         contain unique, non-repeating digits.
     * @throws IllegalArgumentException if the length is more than 9 or less than 1.
     */
    val generateRandomNonRepeatingNumber: (Int) -> Int = { length ->
        //TODO implement the function
        if(length > 9 || length < 1){
            throw IllegalArgumentException ("The Length is more than 9 or less than 1")
        }

        val randomSet = mutableSetOf<Int>()

        while(randomSet.size != length){
            val random = (1..9).random()
            randomSet.add(random)
        }
    var returnInt = randomSet.toIntArray()
    var ret: Int = 0

        for(i in 1..length)
        {
            ret += returnInt[i-1]*(10.0.pow(length-i).toInt())

        }
        ret   // return value is a placeholder
    }

    /**
     * Compares the user's input integer against a generated number for a guessing game.
     * This function evaluates how many digits the user guessed correctly and how many of those
     * are in the correct position. The game generates number with non-repeating digits.
     *
     * Note: The input and the generated number must both be numbers.
     * If the inputs do not meet these criteria, an IllegalArgumentException is thrown.
     *
     * @param input The user's input integer. It should be a number with non-repeating digits.
     * @param generatedNumber The generated number with non-repeating digits to compare against.
     * @return [CompareResult] with two properties:
     *         1. `n`: The number of digits guessed correctly (regardless of their position).
     *         2. `m`: The number of digits guessed correctly and in the correct position.
     *         The result is formatted as "Output: m:n", where "m" and "n" represent the above values, respectively.
     * @throws IllegalArgumentException if the inputs do not have the same number of digits.
     */
    val checkUserInputAgainstGeneratedNumber: (Int, Int) -> CompareResult = { input, generatedNumber ->
        //TODO implement the function
        val inputList = IntToList(input)
        val generatedNumberList = IntToList(generatedNumber)
        val inputSet = inputList.toSet()
        val generatedNumbersSet = generatedNumberList.toSet()
        val n = inputSet.intersect(generatedNumbersSet).size
        var m = 0
        if(generatedNumberList.toString().length != inputList.toString().length){
            throw IllegalArgumentException ("The Length is more than 9 or less than 1")
        }

        for(i in 0..inputList.size-1)
        {
                if(inputList.get(i) == generatedNumberList.get(i))
                {
                    m++
                }
        }


        CompareResult(n, m)   // return value is a placeholder
    }

    private fun IntToList(input: Int): List<Int> {
        var nList = mutableListOf<Int>()


        var initial = input
        var tmp: Int
        var i = 0
        while (initial >= 1) {
            tmp = initial % 10
            nList.add(tmp)
            i++
            initial /= 10
        }

        return nList.reversed()
    }
}

fun main() {
    val App = App()
    println("Welcome to this Game, please type in your suggestion: ")

    val input = readlnOrNull();
    if (input.isNullOrEmpty()) {
        App.playNumberGame()
        return
    }


    val diggitLength = input.toInt()
    App.playNumberGame(diggitLength)
}
